// Prisma schema for production (PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User-specific nutrition targets (nullable; fall back to defaults when null)
  targetCalories Float?
  targetProtein  Float?
  targetCarbs    Float?
  targetFat      Float?
  targetFiber    Float?
  targetSalt     Float?

  accounts  Account[]
  sessions  Session[]
  dailyLogs DailyLog[]
  nutritionCacheItems NutritionCacheItem[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model DailyLog {
  id     String   @id @default(cuid())
  date   DateTime
  userId String

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodEntries  FoodEntry[]
  chatSessions ChatSession[]

  @@unique([userId, date])
  @@map("daily_logs")
}

model FoodEntry {
  id          String   @id @default(cuid())
  name        String
  quantity    String
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  fiber       Float
  salt        Float
  timestamp   DateTime @default(now())
  dailyLogId  String

  dailyLog DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)

  @@map("food_entries")
}

model ChatSession {
  id         String   @id @default(cuid())
  dailyLogId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  dailyLog DailyLog      @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id            String   @id @default(cuid())
  role          String   // "user", "assistant", or "tool"
  content       String?
  timestamp     DateTime @default(now())
  chatSessionId String
  
  // OpenAI-compatible fields
  toolCalls     String?  // JSON array of tool calls (only for assistant messages)
  toolCallId    String?  // Tool call ID (only for tool messages)

  chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model NutritionCacheItem {
  id                String   @id @default(cuid())
  userId            String
  key               String
  name              String
  portionDescription String
  portionSizeGrams  Float
  caloriesPer100g   Float
  proteinPer100g    Float
  carbsPer100g      Float
  fatPer100g        Float
  fiberPer100g      Float
  saltPer100g       Float
  rawJson           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("nutrition_cache_items")
}
